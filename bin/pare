#!/bin/bash
#PBS -l nodes=1:ppn=4

<<"copyright_info"
pare: Predict Active Regulatory Elements using histone marks
Copyright (C) 2015  Sachin Pundhir (pundhir@binf.ku.dk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
copyright_info

VERSION="0.08"
OUTDIR="results";
GENOME="mm9"
MINNFRLENGTH=20
MAXNFRLENGTH=1000
NFR_THRESHOLD="0.05"
BLOCK_BKG_PERCENTILE="0.0005"

#### usage ####
usage() {
	echo Program: "pare (Predict Active Regulatory Elements using histone marks)"
	echo Author: BRIC, University of Copenhagen, Denmark
	echo Version: $VERSION
	echo Contact: pundhir@binf.ku.dk
	echo "Usage: pare -i <file(s)> [OPTIONS]"
	echo "Options:"
	echo " -i <file>   [mapped read file(s) in BAM format]"
    echo "             [if multiple, please separate them by a comma]"
    echo "[OPTIONS]"
    echo " -k <file>   [optimal histone peaks region in BED format]"
    echo "             [-k will get precendence over -c parameter]"
	echo " -c <file>   [mapped reads in BAM format (control)]"
    echo " -o <dir>    [output directory to store results (default: results)"
    echo " -m <string> [genome (default: mm9)]"
    echo " -p <int>    [number of processors to use (run in parallel)]"
    echo " -n <int>    [minimum length of nucleosome free region (default: 20)]"
    echo " -v <int>    [maximum length of nucleosome free region (default: 1000)]"
    echo " -t <float>  [FDR at which to consider a NFR as significant (default: 0.05)]"
    echo " -l <float>  [coverage threshold parameter; should be between 0 - 0.01 (default: 0.0005)]"
    echo "             [NOTE: higher the value - more stringent would be the search]"
    echo " -w          [create bigwig files for input bam files]"
	echo " -h          [help]"
    if [ ! -z "$PAREPATH" ]; then
    echo "Available genomes:"
    echo " $(cat $PAREPATH/data/annotations/GENOME_FILE | perl -ane 'print "$F[0]; ";')"
    fi
    echo
	exit 0
}

#### parse options ####
while getopts i:c:k:o:m:p:n:v:t:l:wh ARG; do
	case "$ARG" in
		i) BAMFILEs=$OPTARG;;
		c) CONTROL=$OPTARG;;
        k) PEAKREGION=$OPTARG;;
        o) OUTDIR=$OPTARG;;
        m) GENOME=$OPTARG;;
        p) PARALLEL=$OPTARG;;
        n) MINNFRLENGTH=$OPTARG;;
        v) MAXNFRLENGTH=$OPTARG;;
        t) NFR_THRESHOLD=$OPTARG;;
        l) BLOCK_BKG_PERCENTILE=$OPTARG;;
        w) BIGWIG=1;;
		h) HELP=1;;
	esac
done

echo
if [ "$HELP" ]; then
    usage
fi

echo
## usage, if necessary file and directories are given/exist
if [ -z "$BAMFILEs" ]; then
    echo
    echo "Error: one or more required parameter values not provided"
    echo
	usage
fi

## check, if required environment variable is set
if [ -z "$PAREPATH" -o ! -d "$PAREPATH" ]; then
    echo
    echo "The environment variable $PAREPATH is either not set or is set incorrectly"
    echo "Please define it as: export $PAREPATH=<path to the installation directory of PARE>"
    echo
    exit 0    
fi

## check if coverage threshold parameter is between 0 and 0.01
if [ "$(echo $BLOCK_BKG_PERCENTILE | perl -ane 'if($_ < 0 || $_ > 0.01) { print 1; } else { print 0; }')" -eq 1 ]; then 
    echo
    echo "Coverage threshold parameter (-l) should be between 0 and 0.01"
    echo
    exit 1
fi

## check, if all prerequisite perl modules, R modules and binaries are installed
$PAREPATH/bin/checkPrerequisite
if [ $? -eq 1 ]; then
    echo
    echo "One or more perl module, R module or dependent binary is missing";
    echo "Check for complete dependency list at http://servers.binf.ku.dk/pare/"
    echo
    exit 1
fi

## populate files based on input genome
GENOME_FILE=$(initialize_genome -i $PAREPATH/data/annotations/GENOME_FILE -g $GENOME)
GENOME_FILE=$PAREPATH/data/annotations/$GENOME_FILE
if [ ! -f "$GENOME_FILE" ]; then
    echo
    echo "computation for $GENOME is not available yet"
    echo "please add the chromosome size file for $GENOME at $PAREPATH/data/annotations"
    echo "also update the $PAREPATH/data/annotations/GENOME_FILE"
    echo
    echo "chromosome size file for your organism can be downloaded using"
    echo "mysql  --user=genome --host=genome-mysql.cse.ucsc.edu -A -D hg19 -e 'select chrom,size from chromInfo'"
    echo
    usage
fi

## print used command
if [ ! -z "$PEAKREGION" ]; then
    echo "INITIATING PARE AS: pare -i $BAMFILEs -k $PEAKREGION -o $OUTDIR -m $GENOME -p $PARALLEL -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -l $BLOCK_BKG_PERCENTILE"
elif [ ! -z "$CONTROL" ]; then
    echo "INITIATING PARE AS: pare -i $BAMFILEs -c $CONTROL -o $OUTDIR -m $GENOME -p $PARALLEL -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -l $BLOCK_BKG_PERCENTILE"
else
    echo "INITIATING PARE AS: pare -i $BAMFILEs -k AUTOCOMPUTE -o $OUTDIR -m $GENOME -p $PARALLEL -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -l $BLOCK_BKG_PERCENTILE"
fi

## start time
START_TIME=$(date +%s)

if [ "$GENOME" == "mm9" ]; then
    GENOME_MACS2="mm"
elif [ "$GENOME" == "mm10" ]; then
    GENOME_MACS2="mm"
elif [ "$GENOME" == "hg19" ]; then
    GENOME_MACS2="hs"
elif [ "$GENOME" == "hg38" ]; then
    GENOME_MACS2="hs"
fi

## Create directory structure
if [ ! -d "$OUTDIR/analysis" ]; then
    mkdir -p $OUTDIR/analysis
fi
if [ ! -d "$OUTDIR/macs2" ]; then
    mkdir -p $OUTDIR/macs2
fi

## optimize threshold, if control file is provided
#if [ -f "$CONTROL" -o ! -z "$PEAKREGION" ]; then
#    BLOCK_BKG_PERCENTILE="0.0005"
#else
#    BLOCK_BKG_PERCENTILE="0.005"
#fi

## initialize input BAM files
oIFS=$IFS
IFS=","
BAMFILEa=($BAMFILEs)
IFS=$oIFS

## check, if input BAM files exist
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    if [ ! -f "${BAMFILEa[$i]}" ]; then
        echo
        echo "Cannot locate input BAM file, ${BAMFILEa[$i]}. Please check if it exists."
        echo
        exit 1
    fi
done

echo -n "Initialize input bam files - remove PCR duplicates (`date`).. "
BAMFILEs=""
touch $OUTDIR/macs2/samtools_rmdup.log
for(( i=0; i<${#BAMFILEa[@]}; i++ )); do
    if [ ! -s "$OUTDIR/macs2/histone_Rep$i.bam" ]; then
        #scp ${BAMFILEa[$i]} $OUTDIR/macs2/histone_Rep$i.bam
        samtools rmdup -s ${BAMFILEa[$i]} $OUTDIR/macs2/histone_Rep$i.bam &>>$OUTDIR/macs2/samtools_rmdup.log &
    fi
    BAMFILEs="$BAMFILEs,$OUTDIR/macs2/histone_Rep$i.bam"
done
wait
BAMFILEs=$(echo $BAMFILEs | perl -ane '$_=~s/^\,//g; print $_;')
echo "done"

echo -n "Compute region peak file (`date`).. "
## reformat input BAM files into macs2 input format
BAMFILEx=$(echo $BAMFILEs | perl -ane '$_=~s/\,/ /g; print $_;')

## compute region peak file
if [ -z "$PEAKREGION" -a -s "$OUTDIR/macs2/MACS2_peaks20K.narrowPeak" ]; then
    PEAKREGION="$OUTDIR/macs2/MACS2_peaks20K.narrowPeak"
elif [ -z "$PEAKREGION" ]; then
    if [ ! -z "$GENOME_MACS2" ]; then
        macs2 predictd -i $BAMFILEx -g $GENOME_MACS2 --outdir $OUTDIR/macs2/ 2>$OUTDIR/macs2/predictd.rep0 &

    else
        macs2 predictd -i $BAMFILEx --outdir $OUTDIR/macs2/ 2>$OUTDIR/macs2/predictd.rep0 &

    fi
    wait

    FRAGMENTLENGTH=$(cat $OUTDIR/macs2/predictd.rep0 | grep "predicted fragment length" | perl -ane 'print $F[scalar(@F)-2];')

    if [ ! -z "$GENOME_MACS2" ]; then
        if [ -f "$CONTROL" ]; then
            if echo $(macs2 --version 2>&1) | grep -qE "2\.0"; then
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_/2);'`
                macs2 callpeak -t $BAMFILEx -c $CONTROL --outdir $OUTDIR/macs2 -n MACS2 -g $GENOME_MACS2 -p 1e-3 --nomodel --shiftsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            else
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_);'`
                macs2 callpeak -t $BAMFILEx -c $CONTROL --outdir $OUTDIR/macs2 -n MACS2 -g $GENOME_MACS2 -p 1e-3 --nomodel --extsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            fi
        else
            if echo $(macs2 --version 2>&1) | grep -qE "2\.0"; then
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_/2);'`
                macs2 callpeak -t $BAMFILEx --outdir $OUTDIR/macs2 -n MACS2 -g $GENOME_MACS2 -p 1e-3 --nomodel --shiftsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            else
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_);'`
                macs2 callpeak -t $BAMFILEx --outdir $OUTDIR/macs2 -n MACS2 -g $GENOME_MACS2 -p 1e-3 --nomodel --extsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            fi
        fi
    else
        if [ -f "$CONTROL" ]; then
            if echo $(macs2 --version 2>&1) | grep -qE "2\.0"; then
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_/2);'`
                macs2 callpeak -t $BAMFILEx -c $CONTROL --outdir $OUTDIR/macs2 -n MACS2 -p 1e-3 --nomodel --shiftsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            else
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_);'`
                macs2 callpeak -t $BAMFILEx -c $CONTROL --outdir $OUTDIR/macs2 -n MACS2 -p 1e-3 --nomodel --extsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            fi
        else
            if echo $(macs2 --version 2>&1) | grep -qE "2\.0"; then
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_/2);'`
                macs2 callpeak -t $BAMFILEx --outdir $OUTDIR/macs2 -n MACS2 -p 1e-3 --nomodel --shiftsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            else
                EXTEND=`echo $FRAGMENTLENGTH | perl -ane 'printf("%0.0f", $_);'`
                macs2 callpeak -t $BAMFILEx --outdir $OUTDIR/macs2 -n MACS2 -p 1e-3 --nomodel --extsize $EXTEND 2>$OUTDIR/macs2/MACS2.log
            fi
        fi
    fi

    cat $OUTDIR/macs2/MACS2_peaks.narrowPeak | sort -k 8rn,8 | head -n 20000 > $OUTDIR/macs2/MACS2_peaks20K.narrowPeak
    #bedtools sample -i $OUTDIR/macs2/MACS2_peaks.narrowPeak -n 20000 -seed 1 > $OUTDIR/macs2/MACS2_peaks20K.narrowPeak
    PEAKREGION="$OUTDIR/macs2/MACS2_peaks20K.narrowPeak"
fi
echo "done"

echo -n "Initiate PARE run (`date`).. "
## run PARE
if [ -z "$PARALLEL" ]; then
    if [ -z "$BIGWIG" ]; then
        $PAREPATH/bin/nfrAnaAll -i $BAMFILEs -k $PEAKREGION -o $OUTDIR/analysis -m $GENOME -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -d -z $BLOCK_BKG_PERCENTILE
    else
        $PAREPATH/bin/nfrAnaAll -i $BAMFILEs -k $PEAKREGION -o $OUTDIR/analysis -m $GENOME -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -d -z $BLOCK_BKG_PERCENTILE -w
    fi
else
    if [ -z "$BIGWIG" ]; then
        $PAREPATH/bin/nfrAnaAll -i $BAMFILEs -k $PEAKREGION -o $OUTDIR/analysis -m $GENOME -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -d -p $PARALLEL -z $BLOCK_BKG_PERCENTILE
    else
        $PAREPATH/bin/nfrAnaAll -i $BAMFILEs -k $PEAKREGION -o $OUTDIR/analysis -m $GENOME -n $MINNFRLENGTH -v $MAXNFRLENGTH -t $NFR_THRESHOLD -d -p $PARALLEL -z $BLOCK_BKG_PERCENTILE -w
    fi
fi

## check, if everything worked properly
if [ $? -eq 1 ]; then
    echo
    echo "Something didn't worked properly. Please check the log files under analysis/logs";
    echo
    exit 1
fi
echo "done"

echo "Prepare final output files (`date`).. "
## prepare final output files
ID=`echo $BAMFILEx | perl -ane '$_=~s/^.*\///g; $_=~s/Rep.*$//g; $_=~s/\_$//g; print $_;'`;

## all results
if [ -s "$OUTDIR/analysis/$ID.All.nfrP" ]; then
    perl -e 'print "#chr\tstart\tend\tname\tscore (nfrDip)\tstrand\tup-block\tdown-block\tTPM (up-block)\tlength (up-block)\tTPM (down-block)\tlength (down-block)\tTPM (NFR)\tlength (NFR)\tp-value\tFDR\tDirectionality score\n";' > $OUTDIR/RESULTS.ALL
    cat $OUTDIR/analysis/$ID.All.nfrP | perl -ane '$F[5]="."; print "$F[0]"; foreach(@F[1..scalar(@F)-1]) { print "\t$_"; } print "\n";' >> $OUTDIR/RESULTS.ALL
fi

## significant results
if [ "$(cat $OUTDIR/analysis/$ID.All.nfr.sig |  wc -l)" -gt 0 ]; then
    echo "#NOTE: No significant NFR is found at FDR < $NFR_THRESHOLD. Instead using p-value < $NFR_THRESHOLD to output significant NFRs" > $OUTDIR/RESULTS.TXT
    perl -e 'print "#chr\tstart\tend\tname\tscore (nfrDip)\tstrand\tp-value\tFDR\n";' > $OUTDIR/RESULTS.TXT
    cat $OUTDIR/analysis/$ID.All.nfr.sig | perl -ane 'print "$F[0]\t$F[1]\t$F[2]\t$F[3]\t$F[4]\t.\t$F[14]\t$F[15]\n";' >> $OUTDIR/RESULTS.TXT
    scp $OUTDIR/analysis/$ID.All.nfr.sig.ucsc $OUTDIR/RESULTS.UCSC
    convert_2_html_table -d "\t" -f $OUTDIR/RESULTS.TXT > $OUTDIR/RESULTS.HTML
else
    echo "No significant NFR is found in the data. This may be due to a stringent coverage parameter (-l). Please try relaxing it to a lower value, for example: 0.00001" > $OUTDIR/RESULTS.TXT
fi

## end time
END_TIME=$(date +%s)
RUN_TIME=$((END_TIME-START_TIME))
RUN_TIME=$(printf '%dh:%dm:%ds\n' $(($RUN_TIME/3600)) $(($RUN_TIME%3600/60)) $(($RUN_TIME%60)))

DATE=`date`
echo "# timestamp: $DATE
# version: $VERSION
# run time: $RUN_TIME
# parameter file: $OUTDIR/analysis/PARAMETERS
# result file (text format): $OUTDIR/RESULTS.TXT
# result file (ucsc browser): $OUTDIR/RESULTS.UCSC
# result file (html format): $OUTDIR/RESULTS.HTML
# result file (all NFRs; sig + insig): $OUTDIR/RESULTS.ALL" > $OUTDIR/RUN.INFO

echo "All done. Bye"

exit
